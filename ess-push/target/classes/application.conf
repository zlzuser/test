include "common"
akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      message-frame-size =  30000000b
        send-buffer-size =  30000000b
        receive-buffer-size =  30000000b
        maximum-frame-size = 30000000b
    }
  }
}

main-dispatcher {
	# Dispatcher is the name of the event-based dispatcher
	type = Dispatcher
	# What kind of ExecutionService to use
	executor = "thread-pool-executor"
	# Configuration for the thread pool
	thread-pool-executor {
	# minimum number of threads to cap factor-based core number to
	max-pool-size-min = 100
	# No of core threads ... ceil(available processors * factor)
	max-pool-size-factor = 8.0
	# maximum number of threads to cap factor-based number to
	max-pool-size-max = 300
	
	core-pool-size-min = 100
	# No of core threads ... ceil(available processors * factor)
	core-pool-size-factor = 8.0
	# maximum number of threads to cap factor-based number to
	core-pool-size-max = 300
	}
	# Throughput defines the maximum number of messages to be
	# processed per actor before the thread jumps to the next actor.
	# Set to 1 for as fair as possible.
	throughput = 100
	}

other-dispatcher {
	# Dispatcher is the name of the event-based dispatcher
	type = Dispatcher
	# What kind of ExecutionService to use
	executor = "thread-pool-executor"
	# Configuration for the thread pool
	thread-pool-executor {
	# minimum number of threads to cap factor-based core number to
	max-pool-size-min = 100
	# No of core threads ... ceil(available processors * factor)
	max-pool-size-factor = 20.0
	# maximum number of threads to cap factor-based number to
	max-pool-size-max = 3000
	
	core-pool-size-min = 100
	# No of core threads ... ceil(available processors * factor)
	core-pool-size-factor = 20.0
	# maximum number of threads to cap factor-based number to
	core-pool-size-max = 3000
	}
	# Throughput defines the maximum number of messages to be
	# processed per actor before the thread jumps to the next actor.
	# Set to 1 for as fair as possible.
	throughput = 100
	}
	